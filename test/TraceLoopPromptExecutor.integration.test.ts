import { beforeAll, describe, expect, it, vi } from "vitest";
import { TraceLoopPromptExecutor } from "../src/TraceLoopPromptExecutor";
import * as traceloop from "@traceloop/node-server-sdk";
import OpenAI from "openai";

describe("TraceLoopPromptExecutor", () => {
  let executor: TraceLoopPromptExecutor;

  beforeAll(async () => {
    traceloop.initialize({
      appName: "promptexexutortest",
      apiKey: process.env.TRACELOOP_API_KEY,
      disableBatch: true,
      traceloopSyncEnabled: true,
      instrumentModules: {
        openAI: OpenAI,
      },
    });

    await traceloop.waitForInitialization();

    // Instantiate the class which uses the mocked OpenAI
    executor = new TraceLoopPromptExecutor();
  });

  it("should execute a prompt without properties and return the content", async () => {
    const promptName = "extractSearchFromJob";
    const jobDescription = `üü¢  DevOps Senior –≤ –ù–∞–ø–æ–ª–µ–æ–Ω –ò–¢

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚óèSpark
‚óèKubernetes
‚óèDocker - –æ—Ç 2—Ö –ª–µ—Ç
‚óèK8S - –æ—Ç 1 –≥–æ–¥–∞
‚óèLinux - –æ—Ç 2—Ö –ª–µ—Ç
‚óèCloud - –æ—Ç 1 –≥–æ–¥–∞
‚óèTerraform - –æ—Ç 1 –≥–æ–¥–∞
‚óè–°—Ä–µ–¥—Å—Ç–≤–∞ ML: sklearn, tensorflow –±—É–¥—É—Ç –ø–ª—é—Å–æ–º

–ó–∞–¥–∞—á–∏:
‚óè–ü–µ—Ä–µ–≤–æ–¥ —Å Managed Yandex.Cloud –≤ Kubernetes, —à–∏—Ñ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥. —Å—Ä–µ–¥—ã, –∫–æ–Ω–≤–µ–π–µ—Ä–æ–≤, CI/CD, –ø–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Spark —Å–∫—Ä–∏–ø—Ç–æ–≤.
‚óè–ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ Managed Service –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ Kubernetes
‚óè–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CI/CD –∫–æ–Ω–≤–µ–π–µ—Ä–æ–≤. 1 DevOps/1 DE
‚óè–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è Alluxio.
‚óèI&D. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
‚óè–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª–µ–π –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
‚óè–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –º–µ—Ç–∞—Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
‚óèI&D. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
`;

    const variables = { jobDescription };

    const result = await executor.execute(promptName, variables, process.env.OPENAI_MODEL);

    expect(result).toBe('(DevOps OR "DevOps Engineer" OR "SRE" OR "Site Reliability Engineer" OR "–∏–Ω–∂–µ–Ω–µ—Ä DevOps") AND (Spark) AND (Kubernetes OR K8S) AND (Docker) AND (Linux) AND (Cloud OR "–æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" OR "Cloud computing") AND (Terraform) AND ("CI/CD" OR "Continuous Integration" OR "Continuous Delivery" OR "Continuous Deployment") AND (Yandex.Cloud OR "Yandex Cloud") AND (Alluxio) AND (sklearn OR tensorflow OR "ML")');
  });
});
